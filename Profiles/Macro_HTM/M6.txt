
//exec.AddStatusmessage("M6 Start");
exec.Stopspin(); 	//Make sure the spindle is OFF
exec.Code("M09"); 	//Make sure coolant is OFF

//definire mesaj sonor de eroare
System.Media.SoundPlayer errorSound = new System.Media.SoundPlayer(Application.StartupPath + @"\Flashscreen\SOUND\error.wav");

if(!exec.GetLED(56)||!exec.GetLED(57)||!exec.GetLED(58)) // If machine was not homed then it is unsafe to move in machine coordinates, stop here...
{
	exec.AddStatusmessage("ATC - Cannot start! One or more axis are NOT REFERENCED");
	errorSound.Play();
	exec.Stop();
	return;
}

	//declarare variabile
  	int newtool;		//scula noua ceruta in spindle
  	int oldtool;		//scula existenta in spindle
	
  	int newSlot = 0;		//slotul in care se regaseste newtool, daca exista
  	int oldSlot = 0;		//slotul in care se regaseste oldtool, daca exista
	
  	int err_lvl;
	
	//Dim cnt As Integer		'variabila ptr generare timeout in asteptarea semnalelor de la spindle
	
	int rackSize = 10;	//variabila ptr setarea numarului total de sloturi in magazie

	// variabile ptr determinarea initLayer si initParent
	int initLayer = 1;
	int initParent = 1;
	
	bool updateDetails = false;
	
	string rackAxis = AS3.Getfield(30000);	//determinam pe ce axa este aliniata magazia de scule (X sau Y)
	string rackAxis2 = AS3.Getfield(30001);	//determinam pe ce axa este aliniata magazia de scule (X sau Y)
	double rackX = AS3.Getfielddouble(30010);		//pozitia initiala (slot 1) de schimbare a sculelor pe axa X
	double rackY = AS3.Getfielddouble(30011);		//pozitia de schimbare a sculelor pe axa Y
	double rackZ = AS3.Getfielddouble(30012);		//pozitia in care se elibereaza/incarca scula pe axa Z
	double stepRack = AS3.Getfielddouble(30013);		//pasul de indexare ptr fiecare slot in parte
	double clearRack = AS3.Getfielddouble(30014);		//pozitia pe Y (sau X) ptr returnare scula (inainte de intrare in clema
	double safeZ = AS3.Getfielddouble(30015);		//pozitia pe Z ptr incarcare scula (clearance pe deasupra conurilor)
	double emptyZ = AS3.Getfielddouble(30016);		//pozitia pe Z unde se ridica spindle gol, fara scula, ptr traversarea pe deasupra sculelor si incarcarea noii scule
	double tcfeed = AS3.Getfielddouble(30017);		//feedrate la care se face schimbarea sculelor
	// double checkZ;		//daca checkZ <> rackZ atunci oprim la checkZ ptr verifidcare senzor stare slot
	int delay = Convert.ToInt32(AS3.Getfield(30018));		//delay intre operatiuni
	
	// Define position vars for return to this position at the end of the macro
	double Xoriginalpos = exec.GetXmachpos();
	double Yoriginalpos= exec.GetYmachpos();
	double Zoriginalpos= exec.GetZmachpos();
	exec.AddStatusmessage("X" + Xoriginalpos + " - Y" + Yoriginalpos + " - Z" + Zoriginalpos);

	var varSlot = Plugininterface.Datatypes.Tooltablecolumnname.Slot; // variabila care sa gestioneze slotul sculei atat ptr citire cat si ptr scriere
	var varLength = Plugininterface.Datatypes.Tooltablecolumnname.Length;
	var varDiameter = Plugininterface.Datatypes.Tooltablecolumnname.Diameter;
	var varType = Plugininterface.Datatypes.Tooltablecolumnname.Type;

	// preluam layernumber si parentnumber din care s-a initiat comanda M6 ptr intoarcere dupa M6
	List<Plugininterface.Datatypes.Layerdatastruct> Ldata = exec.Getlayerslist(true);
	
for (int i = 1; i < 50; i++)
{
//MessageBox.Show("" + Ldata[1].Isactive); //Shows the Isactive property of the first layer in the List.
	if (Ldata[i].Isactive) {
		if (Ldata[i].Parentnumber > 1){
			exec.AddStatusmessage ("Layernumber = " + Ldata[i].Layernumber);
			exec.AddStatusmessage ("Parentnumber = " + Ldata[i].Parentnumber);
			// exec.AddStatusmessage ("Parent Parentnumber = " + Ldata[Ldata[i].Parentnumber].Parentnumber);
			i = 1000;
		} else {
			exec.AddStatusmessage ("Layernumber = " + Ldata[i].Layernumber);
			exec.AddStatusmessage ("Parentnumber = " + Ldata[i].Parentnumber);
			i = 1000;
		}
	}
}
	
	//checking for invalid values (unconfigured ATC system)
	if ((stepRack == 0) || (safeZ == rackZ) || (tcfeed == 0)) { 
		exec.AddStatusmessage("ATC Setup - Invalid ATC Settings - Check Setup");
		errorSound.Play();
		exec.Stop();
		return;
	}		

	int currentTool = exec.Getcurrenttool(); // Preluăm scula curentă - oldtool in scriptul Mach
	int newTool = exec.Getnewtool(); // scula nou ceruta prin M6 - newtool in scriptul Mach

//////////////////////////////////////////////////////////////////////////////
// case 0 - requested tool already loaded - don't have to load same tool again
	if(newTool == currentTool) return;// Same tool was selected, so do nothing, stop here...


	// ne mutam in pagina de ATC
	AS3.selectlayer(5); // prima data in 5 (parentlayer-ul lui 57)
	AS3.selectlayer(57);	


// case 1 - not same tool, searching if currentTool have own slot already (was previously declared in rack)
	// cautam, daca exista deja, pozitia lui oldtool in sloturi
	for (int i = 20501; i < 20511; i++) {
		if ((currentTool == AS3.Getfielddouble(i)) && (AS3.GetLED(i-19700))) { // atribuim valoare lui oldSlot in caz ca gasim scula in rack
			oldSlot = (i-20500);
		}
	}
		
//case 2 - currentTool does not have own slot, searching for (first) free slot in rack => currentTool return to first free slot in rack 
	//daca oldtool nu are slot propriu cautam slot liber 
	if ((oldSlot == 0) && (currentTool > 0)) {
		//exec.AddStatusmessage("status OK");
		for (int i = 20501; i < 20511; i++) {
			if ((AS3.Getfielddouble(i) == 0) && (AS3.GetLED(i-19700))) {  // daca slotul nu este ocupat - field = 0 - si slotul nu este disabled LED 80x = true
				oldSlot = (i-20500);
				updateDetails = true;
				i = 20511; // iesim din bucla la primul slot liber gasit
			}
		}
		exec.AddStatusmessage("ATC - Found Free Slot = " + oldSlot);

	}

////////////////////////////////////////////////////////////////////////////////
//tool have own slot, returning to it => oldslot = first free slot in rack (110x)
	//daca oldtool > 0 si are slot propriu (sau exista slot liber declarat anterior) in magazie, 
	//returnam scula in slotul aferent
	if ((oldSlot > 0) && (currentTool > 0)) {
		exec.AddStatusmessage("ATC - Returning Tool T" + currentTool + " to Slot #" + oldSlot);
		
		// moving spindle to safeZ for ATC operations
		exec.AddStatusmessage("Moving to safeZ Z"+ safeZ);
		exec.Code("G00 G53 Z"+ safeZ); // Move Z up
		while(exec.IsMoving()){}
		exec.Wait(delay); // Wait 500msec

		// Get current XY machine coordinates to return to this position at the end of the macro
		Xoriginalpos = exec.GetXmachpos();
		Yoriginalpos = exec.GetYmachpos();
		Zoriginalpos = exec.GetZmachpos();
		exec.AddStatusmessage("X" + Xoriginalpos + " - Y" + Yoriginalpos + " - Z" + Zoriginalpos);
		
		// cheking slot sensors, function will report error status if sensors are enabled
		
		// moving spindle in front of receiver slot
		exec.AddStatusmessage("Moving in front of slot at " + rackAxis + (rackX+(oldSlot-1)*stepRack));
		exec.Code("G00 G53 " + rackAxis + (rackX+(oldSlot-1)*stepRack) + rackAxis2 + clearRack); 
		while(exec.IsMoving()){}
		exec.Wait(delay); // Wait 500msec

		// // moving spindle close to receiver slot on clearRack
		// exec.AddStatusmessage("Moving at clearRack at " + rackAxis2 + clearRack);
		// exec.Code("G00 G53 " + rackAxis2 + clearRack); 
		// while(exec.IsMoving()){}
		// exec.Wait(delay); // Wait 500msec
		
		// incepem suflarea aerului ptr curatare slot receptor daca Air Blow este activat			
		if (exec.Readkey("UserTextfields", "20203", "false")=="true") {
			exec.AddStatusmessage("---Blowing air for fork cleaning");
			// de adaugat cod ptr actionare electrovalva
		}
		
		//lowering spindle to releasing Z position (rackZ)
		exec.AddStatusmessage("Moving to rackZ Z" + rackZ);
		exec.Code("G01 G53 Z" + rackZ + " F" + tcfeed); 
		while(exec.IsMoving()){}
		exec.Wait(delay); // Wait 500msec
		
		//moving spindle into final docking position
		exec.AddStatusmessage("Moving into slot at " + rackAxis2 + rackY);
		exec.Code("G01 G53 " + rackAxis2 + rackY + " F" + tcfeed); 
		while(exec.IsMoving()){}
		exec.Wait(delay); // Wait 500msec
		
		//activating drawbar pentru eliberare scula
		exec.AddStatusmessage("---Activating drawbar");
		exec.Setoutpin(1, 16); // Open the chuck with pneumatic valve
		exec.Wait(delay); // Wait 500msec

		//aici trebuie adaugata ridicarea la "emptyZ", cota de deplasare a spindle-ului gol ptr incarcarea noi sculle existente in magazie
		if (emptyZ != safeZ) {
			exec.AddStatusmessage("Moving to emptyZ Z" + emptyZ);
			exec.Code("G01 G53 Z" + emptyZ + " F" + tcfeed); 
			while(exec.IsMoving()){}
		} else { // when emptyZ == safeZ
			exec.AddStatusmessage("Moving to safeZ Z" + safeZ);
			exec.Code("G01 G53 Z" + safeZ + " F" + tcfeed); 
			while(exec.IsMoving()){}
		}
		exec.Wait(delay); // Wait 500msec
		
		//oprire aer
		if (exec.Readkey("UserTextfields", "20203", "false")=="true") {
			exec.AddStatusmessage("---Stop blowing air...");
			// de adaugat codul ptr control output
		}
		

		//daca nu incarcam alta scula (newtool = 0) revenim pe clearY ptr intoarcere directa in TCP
		// exec.Code("G00 G53 " + rackAxis2 + clearRack); 
		// while(exec.IsMoving()){}
		
		
		// cuplare scula
		exec.AddStatusmessage("---Deactivating drawbar");
		exec.Clroutpin(1, 16); // Close the chuck with pneumatic valve
		
		
		//mutam in checkZ ptr verificare prezenta scula in slot dar doar daca senzorii sunt activati
		//if (checkZ <> rackZ) - checkZ inca neimplementat
		
		//daca sloturile au senzori (adica avem rackZ <> checkZ) verificam daca slotul raporteaza scula ca fiind returnata la dupa ce mutam in checkZ

		//scriem currentTool in slotul gasit liber 
		//scriem numarul sculei in field-ul aferent slotului(20501 ptr slotul 1)
		
		exec.Writekey("UserTextfields", Convert.ToString(oldSlot+20500), Convert.ToString(currentTool)); // scriem-salvam noua valoare in profile
                    
		AS3.SetLED(false, (oldSlot+820)); // stingem LED de scula activa pe oldSlot
					
		//afisam numarul sculei in slot
		AS3.Setfield(currentTool, (oldSlot+20500));

		if (updateDetails) { // daca scula a fost returnata in slot liber, actualizam slotul si parametrii sculei (SlotXX)
			//scriem in tooltable noul slot ptr scula nou alocata 
			exec.Writetooltablecell(currentTool, varSlot, Convert.ToString(oldSlot)); // 

			string valueDiameter = exec.Readtooltablecell(currentTool, varDiameter); //DiameterXX
			AS3.Setfieldtext(valueDiameter, oldSlot+20510); // afisam diametrul sculei din slot
			AS3.Validatefield(oldSlot+20520); // validam inputul

			string valueLength = exec.Readtooltablecell(currentTool, varLength); //LengthXX
			AS3.Setfieldtext(valueLength, oldSlot+20520); // afisam lungimea sculei din slot
			AS3.Validatefield(oldSlot+20520); // validam inputul		

			string valueType = exec.Readtooltablecell(currentTool, varType); //TypeXX
			if (valueType == "RH") {
				AS3.SetLED(true, (oldSlot+810)); //ledurile sunt de la 801 la 810
			} else {
				AS3.SetLED(false, (oldSlot+810)); //ledurile sunt de la 801 la 810
			}
					
			// salvam tooltable-ul
			exec.Callbutton(780); // Apelarea butonului pentru salvarea tooltable-ului
		}

		// scriem slotul in care a fost lasata scula si in Tooltable, field-ul SlotXX, unde XX este numarul sculei
		string currentToolSlot = "Slot" + currentTool; // formatam stringul aferent campului unde se seteaza slotul sculei ce a fost in spindle - currentTool

		//si facem scrierea in tooltable 
		exec.Writekey("Tooltablevalues", currentToolSlot, Convert.ToString(oldSlot)); //scriem nr slotului in campul slotului sculei nou alocate slotului activ, oldSlot

		// aici avem spindle empty, deci setam tool 0
		exec.Setcurrenttool(0); //Spindle empty! Set the current tool -> 0
		

	}

//daca totusi nu exista slot liber asteptam eliberare manuala a sculei. mutam spindle in TCP
	if ((oldSlot == 0) && (currentTool > 0)) {
		//moving to TCP prin script intern
		//Call RunScript("ScreenSetMacros\" & GetActiveScreenSetName() & "\" & "Masters\Scripts\Common\GoTCPosition")

		// Dim manualremove As Integer
		// manualremove = Machmsg ("Manually remove the tool from spindle! Press OK when done!","Manual tool",1)
		// 'setuserled(1905,0)		'stingem ledul martor prezenta scula in spindle
		// If manualremove <> 1 Then DoOEMButton( 1021 ) 'reset
		// If manualremove = 1 Then If err_lvl > 1 Then Message "ATC - Tool was manually removed from spindle"
		
		exec.AddStatusmessage("No free slot! Go to TCP! Tool removed!");
		exec.Setcurrenttool(0); //Spindle empty! Set the current tool -> 0

	}
	
//newtool loading code
//run only if newtool is not 0

	if (newTool > 0) {
		
		  
	//searching newtool no in slots
		for (int i = 1; i < 11; i++) {
			if (AS3.GetLED(i+800)) {  // cautam doar in sloturile active
				if (newTool == Convert.ToInt32(AS3.Getfield(i+20500))) {
					newSlot = (i);
					exec.AddStatusmessage("ATC - T" + newTool + " found in Slot #" + newSlot);
					i = 11; // iesim din bucla daca gasim scula ceruta in magazie
				}
			}
		}

		//aici trebuie adaugata coborarea la "emptyZ", cota de deplasare a spindle-ului gol ptr incarcarea noi sculle existente in magazie
		if (emptyZ != safeZ) {
			exec.AddStatusmessage("Moving to emptyZ Z" + emptyZ);
			exec.Code("G01 G53 Z" + emptyZ + " F" + tcfeed); 
			while(exec.IsMoving()){}
		} else { // when emptyZ == safeZ
			exec.AddStatusmessage("Moving to safeZ Z" + safeZ);
			exec.Code("G01 G53 Z" + safeZ + " F" + tcfeed); 
			while(exec.IsMoving()){}
		}
		exec.Wait(delay); // Wait 500msec
		
		// moving spindle above emmiter slot
		exec.AddStatusmessage("Moving above slot at " + rackAxis + (rackX+(newSlot-1)*stepRack));
		exec.Code("G00 G53 " + rackAxis + (rackX+(newSlot-1)*stepRack)); 
		while(exec.IsMoving()){}
		exec.Wait(delay); // Wait 500msec		

		//activating drawbar pentru cuplare scula scula
		exec.AddStatusmessage("---Activating drawbar");
		exec.Setoutpin(1, 16); // Open the chuck with pneumatic valve
		
		// incepem suflarea aerului ptr curatare slot receptor			
		if (exec.Readkey("UserTextfields", "20203", "false")=="true") {
			exec.AddStatusmessage("---Blowing air for fork cleaning");
			// de adaugat cod ptr actionare electrovalva
		}

		//lowering spindle to loading Z position (rackZ)
		exec.AddStatusmessage("Moving to rackZ Z" + rackZ);
		exec.Code("G01 G53 Z" + rackZ + " F" + tcfeed); 
		while(exec.IsMoving()){}
		exec.Wait(delay); // Wait 500msec

		// cuplare scula
		exec.AddStatusmessage("---Deactivating drawbar");
		exec.Clroutpin(1, 16); // Close the chuck with pneumatic valve
		
		//oprire aer
		if (exec.Readkey("UserTextfields", "20203", "false")=="true") {
			exec.AddStatusmessage("---Stop blowing air");
			// de adaugat cod ptr actionare electrovalva
		}
		
		// moving spindle to clearRack
		exec.AddStatusmessage("Moving at clearRack at " + rackAxis2 + clearRack);
		exec.Code("G01 G53 " + rackAxis2 + clearRack); 
		while(exec.IsMoving()){}
		exec.Wait(delay); // Wait 500msec

		// moving spindle to clear Z for ATC operations
		exec.AddStatusmessage("Moving to safeZ Z"+ safeZ);
		exec.Code("G00 G53 Z"+ safeZ); // Move Z up
		while(exec.IsMoving()){}
		exec.Wait(delay); // Wait 500msec

		
	exec.Setcurrenttool(newTool); //Set the current tool -> the new tool
	// salvam scula din spindle	
	exec.Writekey("UserTextfields", "20222", Convert.ToString(newTool)); // salvam starea slotului prin scriere 0 in profile	
	
	AS3.SetLED(true, (newSlot+820)); // aprindem LED de scula activa pe oldSlot

		
	}
	
	// Move back to start point
	
	exec.Code("G43 H" + newTool);
	exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos + " Z" + Zoriginalpos);
	while(exec.IsMoving()){}



	// ne intoarcem in screen-ul din care a fost initiata comanda M6 
//	AS3.selectlayer(initParent); // prima data in 5 (parentlayer-ul lui 57)
//	AS3.selectlayer(initLayer);	
	
exec.AddStatusmessage("M6 Finished");
return;

/*

//Example linear toolchanger code

//Tool positions definition
int Chuckopenport = 1;
int Chuckopenpin = 16;

double[] ToolX = new double[11];
double[] ToolY = new double[11];
ToolX[0] = 0; // Tool0 X position
ToolY[0] = 0; // Tool0 Y position

ToolX[1] = 50; // Tool1 X position
ToolY[1] = 10; // Tool1 Y position
ToolX[2] = 100; // Tool2 X position
ToolY[2] = 10; // Tool2 Y position
ToolX[3] = 150; // Tool3 X position
ToolY[3] = 10; // Tool3 Y position
ToolX[4] = 200; // Tool4 X position
ToolY[4] = 10; // Tool4 Y position
ToolX[5] = 250; // Tool5 X position
ToolY[5] = 10; // Tool5 Y position
ToolX[6] = 300; // Tool6 X position
ToolY[6] = 10; // Tool6 Y position
ToolX[7] = 350; // Tool7 X position
ToolY[7] = 10; // Tool7 Y position
ToolX[8] = 400; // Tool8 X position
ToolY[8] = 10; // Tool8 Y position
ToolX[9] = 450; // Tool9 X position
ToolY[9] = 10; // Tool9 Y position
ToolX[10] = 500; // Tool10 X position
ToolY[10] = 10; // Tool10 Y position

double SafeZ = 100;
double Ztoolrelease = 30;
double Ztoolpickup = 28;

int Newtool = exec.Getnewtool();
int Currenttool = exec.Getcurrenttool();

if(Newtool == -1) // If new tool number is -1 means a missing T code, so we need to stop here...
return; 

if(Newtool <1 || Newtool >10) // Tool number is out of range, so we need to stop here...
return;

if(Newtool == Currenttool) // Same tool was selected, so do nothing, stop here...
return; 

if(!exec.GetLED(56)||!exec.GetLED(57)||!exec.GetLED(58)) // If machine was not homed then it is unsafe to move in machine coordinates, stop here...
{
  MessageBox.Show("The machine was not yet homed, do homeing before executing a tool change!");
  exec.Stop();
  return;
}

while(exec.IsMoving()){}

// Get current XY machine coordinates to return to this position at the end of the macro

double Xoriginalpos = exec.GetXmachpos();
double Yoriginalpos = exec.GetYmachpos();

// Stop spindle if running and Move Z up

exec.Stopspin(); 
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}

if(Currenttool!=0) // No need to drop down tool if current tool number is zero
{
  // Move to old tool position on XY plane

  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){}

  // Drop current tool
  
  exec.Code("G00 G53 Z"+ Ztoolrelease); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Setoutpin(Chuckopenport, Chuckopenpin); // Open the chuck with pneumatic valve
  exec.Wait(1000); // Wait one 1000msec
  exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
  while(exec.IsMoving()){}
}

// Move to new tool position on XY plane
exec.Code("G00 G53 X" + ToolX[Newtool] + " Y" + ToolY[Newtool]);
while(exec.IsMoving()){}
// Pick new tool

exec.Code("G00 G53 Z"+ Ztoolpickup); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Wait(1000); // Wait one 1000msec
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}

// Move back to start point

exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}

// Measure new tool will go here....
//exec.Code("G43 H"+Newtool); // Load new tool offset

exec.Wait(200);
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  MessageBox.Show("Tool change done.");
}
else
{
  exec.StopWithDeccel();
  MessageBox.Show("Tool change was interrupted by user!");
}

*/

